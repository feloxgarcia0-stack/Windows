name: RDP con Cloudflare (Depuración Final)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Habilitar RDP y Crear Usuario
        run: |
          $Password = "P@ssw0rdFeloxPC2025!"
          net user Runner $Password /add /y
          net localgroup administrators Runner /add
          net localgroup "Remote Desktop Users" Runner /add
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          netsh advfirewall firewall add rule name="Allow RDP" dir=in action=allow protocol=TCP localport=3389
          echo "RDP_USER=Runner" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "RDP_PASSWORD=$Password" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Iniciar Cloudflare Tunnel y Diagnosticar
        run: |
          # Descarga el ejecutable de cloudflared.
          Invoke-WebRequest -Uri 'https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe' -OutFile 'C:\cloudflared.exe'
          
          # Inicia el túnel en segundo plano, redirigiendo su salida de error a un log.
          Start-Process -FilePath "C:\cloudflared.exe" -ArgumentList "tunnel --url tcp://localhost:3389" -NoNewWindow -RedirectStandardError "$env:TEMP\cloudflared.log"
          
          # Aumentamos la espera a 30 segundos para dar el máximo tiempo posible.
          Write-Host "Esperando 30 segundos a que Cloudflare establezca el túnel..."
          Start-Sleep -Seconds 30
          
          # --- PASO DE DIAGNÓSTICO ---
          # Mostramos el contenido completo del archivo de log, PASE LO QUE PASE.
          Write-Host "================ INICIO DEL LOG DE CLOUDFLARE ================"
          # Usamos try/catch para evitar que el workflow falle si el archivo no existe.
          try {
              Get-Content "$env:TEMP\cloudflared.log"
          } catch {
              Write-Host "El archivo de log no existe o está vacío."
          }
          Write-Host "================= FIN DEL LOG DE CLOUDFLARE ================="
          
          # Buscamos la dirección del túnel en el log.
          $CfAddress = Get-Content "$env:TEMP\cloudflared.log" -ErrorAction SilentlyContinue | Select-String -Pattern "tcp://.*\.trycloudflare.com" | ForEach-Object { $_.Matches.Value } | Select-Object -Last 1
          
          if (-not $CfAddress) {
              Write-Error "Diagnóstico final: No se encontró la dirección del túnel en el log. Revisa el contenido del log de arriba para ver el error."
              exit 1
          }
          
          $CleanAddress = $CfAddress -replace "tcp://",""
          echo "CF_ADDRESS=$CleanAddress" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Mostrar Credenciales de Conexión
        run: |
          Write-Host "Dirección (PC Name): ${{ env.CF_ADDRESS }}"
          Write-Host "Usuario:             ${{ env.RDP_USER }}"
          Write-Host "Contraseña:          ${{ env.RDP_PASSWORD }}"
          
      - name: Mantener la Conexión Activa
        run: Start-Sleep -Seconds 21300
